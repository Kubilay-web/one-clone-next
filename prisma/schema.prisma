generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role{
  USER
  ADMIN
  SELLER
}

model User {
  id                    String         @id @map("_id")  // MongoDB'de _id otomatik oluşturulur
  username              String         @unique
  displayName           String
  email                 String?        @unique
  passwordHash          String?
  googleId              String?        @unique
  avatarUrl             String?
  bio                   String?
  role                  Role           @default(USER)
  sessions              Session[]      @relation("UserSessions")
  posts                 Post[]         @relation("UserPosts")
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]         @relation("UserLikes")
  bookmarks             Bookmark[]     @relation("UserBookmarks")
  comments              Comment[]      @relation("UserComments")
  notificationsSent     Notification[] @relation("Issuer")  // Kullanıcının gönderdiği bildirimler
  notificationsReceived Notification[] @relation("Recipient")  // Kullanıcının aldığı bildirimler

  createdAt             DateTime       @default(now())
  updatedAt             DateTime?       @updatedAt

  stores Store[] @relation("UserStores")
  followingStores UserFollowingStore[]
  reviews Review[] @relation("ReviewToUser")

  @@map("users")
}

model Session {
  id        String   @id @map("_id") // MongoDB'deki _id'yi haritalamak için @map("_id")
  userId    String
  expiresAt DateTime
  user      User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id        String     @id @default(cuid()) @map("_id") // MongoDB'deki _id'yi haritalamak için @map("_id")
  content   String
  userId    String
  user      User       @relation("UserPosts", fields: [userId], references: [id])

  createdAt DateTime   @default(now())

  attachments    Media[]    @relation("PostMedia") // Post ile Media ilişkisi
  comments  Comment[]  @relation("PostComments") // Post ile Comment ilişkisi
  likes     Like[]     @relation("PostLikes") // Post ile Like ilişkisi
  bookmarks Bookmark[] @relation("PostBookmarks") // Post ile Bookmark ilişkisi
  notifications Notification[] @relation("PostNotifications") // Post ile bildirim ilişkisi

  @@map("posts")
}

model Follow {
  id           String @id @default(auto()) @map("_id") @db.ObjectId // MongoDB için ObjectId kullanılır
  followerId   String
  follower     User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId  String
  following    User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Media {
  id       String    @id @default(cuid()) @map("_id")  // MongoDB'deki _id'yi haritalamak için @map("_id")
  postId   String?
  post     Post?     @relation("PostMedia", fields: [postId], references: [id], onDelete: SetNull)  // Post ile Media arasında ilişki
  type     MediaType
  url      String

  createdAt DateTime @default(now())  // Medyanın oluşturulma zamanı

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Comment {
  id        String   @id @default(cuid()) @map("_id") // MongoDB'ye uygun _id
  content   String
  userId    String
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())  // Yorumun oluşturulma zamanı

  @@map("comments")
}

model Like {
  id      String   @id @default(cuid()) @map("_id")  // MongoDB'ye uygun _id
  userId  String
  user    User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  postId  String
  post    Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])  // Her kullanıcı bir postu yalnızca bir kez beğenebilir
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")  // MongoDB'deki _id'yi haritalamak için @map("_id")
  userId String
  user   User   @relation("UserBookmarks", fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation("PostBookmarks", fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())  // Bookmark'un oluşturulma zamanı

  @@unique([userId, postId])  // Her kullanıcı bir postu yalnızca bir kez kaydedebilir
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid()) @map("_id")  // MongoDB'ye uygun _id ekliyoruz
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation("PostNotifications", fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}


model Category {
  id        String   @id @default(cuid()) @map("_id") 
  name      String
  image     String
  url       String @unique
  featured  Boolean  @default(false)


 subCategories SubCategory[] @relation("CategoryToSubcategory")

 products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

   @@map("categories")
}



model SubCategory {
  id        String   @id @default(cuid()) @map("_id") 
  name      String
  image     String
  url       String @unique
  featured  Boolean  @default(false)

  categoryId String 
  category Category @relation("CategoryToSubcategory",fields: [categoryId],references: [id])

  product Product[] @relation("SubCategoryToProduct") 

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  @@index([categoryId])
  @@map("subcategories")
}


enum StoreStatus{
  PENDING
  ACTIVE
  BANNED
  DISABLED
}


model Store {
  id                    String   @id @default(cuid()) @map("_id")
  name                  String
  description           String  
  email                 String   @unique
  phone                 String
  url                   String   @unique
  logo                  String
  cover                 String
  status                StoreStatus @default(PENDING)
  averageRating        Float    @default(0)
  featured             Boolean  @default(false)
  returnPolicy         String @default("Return in 30 days.")
  defaultShippingService String @default("International Delivery")
  defaultShippingFeePerItem Float @default(0)
  defaultShippingFeeForAdditionalItem Float @default(0)
  defaultShippingFeePerKg Float @default(0)
  defaultShippingFeeFixed Float @default(0)
  defaultDeliveryTimeMin  Int @default(7)
  defaultDeliveryTimeMax  Int @default(31)

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  userId String
  user User @relation("UserStores",fields: [userId],references: [id])

  products Product[] @relation("StoreToProduct")

  shippingRates ShippingRate[] @relation("StoreShippingRates")
    followers UserFollowingStore[]

  @@index([userId])

  @@map("store")

}


model UserFollowingStore {
  id      String @id @default(cuid()) @map("_id")
  userId  String
  storeId String

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([userId, storeId])
  @@index([userId])
  @@index([storeId])
  @@map("user_following_store")
}



enum ShippingFeeMethod{
  ITEM
  WEIGHT
  FIXED
}


model Product{
    id                    String   @id @default(cuid()) @map("_id")
    name String 
    description String 
    slug String @unique
    brand String
    rating Float @default(0)
    sales Int @default(0)
    numReviews Int @default(0)
    shippingFeeMethod ShippingFeeMethod @default(ITEM)

   freeShipping FreeShipping? @relation("ProductFreeShipping")


  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])

  variants ProductVariant[] @relation("ProductToProductVariant")
  specs Spec[] @relation("ProductSpec")
  questions Question[] @relation("ProductQuestion")

  reviews Review[] @relation("ReviewToProduct")

    categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])

      subCategoryId String
  subCategory SubCategory @relation("SubCategoryToProduct",fields: [subCategoryId],references: [id])

   offerTagId String?
  offerTag   OfferTag? @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
    @@index([offerTagId])

}


model ProductVariant{
   id                    String   @id @default(cuid()) @map("_id")
   variantName String
   variantDescription String?
   variantImage String
   slug String @unique
   isSale Boolean @default(false)
   saleEndDate String?
   keywords String
   sku String
   sales Int @default(0)
   weight Float

   productId String
   product Product @relation("ProductToProductVariant",fields: [productId],references: [id])


   sizes Size[] @relation("ProductVariantSizes")
   images ProductVariantImage[] @relation("ProductVariantToVariantImage")
    colors Color[] @relation("ProductVariantColors")

    specs Spec[] @relation("ProductVariantSpec")

   createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

   @@index([productId])

}


model Size{
  id                    String   @id @default(cuid()) @map("_id")
  size String
  quantity Int
  price Float
  discount Float @default(0)

  productVariantId String
  productVariant ProductVariant @relation("ProductVariantSizes",fields: [productVariantId],references: [id]) 

     createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  @@index([productVariantId])

}


model ProductVariantImage{
   id                    String   @id @default(cuid()) @map("_id")
   url String
   alt String @default("")

   productVariantId String
   productVariant ProductVariant @relation("ProductVariantToVariantImage",fields: [productVariantId],references: [id])

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

   @@index([productVariantId])

}


model Color{
  id                    String   @id @default(cuid()) @map("_id")
  name String

  productVariantId String
   productVariant ProductVariant @relation("ProductVariantColors",fields: [productVariantId],references: [id])


       createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  @@index([productVariantId])

}


model Spec{
  id                    String   @id @default(cuid()) @map("_id")
  name String
  value String
  productId String?
  product Product? @relation("ProductSpec",fields: [productId],references: [id],onDelete:Cascade)

  variantId String?
  variant ProductVariant? @relation("ProductVariantSpec",fields: [variantId],references: [id],onDelete:Cascade)

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

@@index([productId])
@@index([variantId])
}



model Question{
  id                    String   @id @default(cuid()) @map("_id")
  question String
  answer String
  productId String
  product Product @relation("ProductQuestion",fields: [productId],references: [id],onDelete:Cascade)

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  @@index([productId])
}


model Country{
   id                    String   @id @default(cuid()) @map("_id")
   name String @unique
   code String @unique

   shippingRates ShippingRate[] @relation("CountryShippingRates")
   freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry")

  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor
}


model ShippingRate{
   id                    String   @id @default(cuid()) @map("_id")

  shippingService String 
  shippingFeePerItem Float 
  shippingFeeForAdditionalItem Float 
  shippingFeePerKg Float 
  shippingFeeFixed Float 
  deliveryTimeMin  Int 
  deliveryTimeMax  Int
  returnPolicy String 

  countryId String
  country Country @relation("CountryShippingRates",fields: [countryId],references: [id])

  storeId String
  store Store @relation("StoreShippingRates",fields: [storeId],references: [id])


  createdAt DateTime @default(now()) // CreatedAt zamanını otomatik olarak ayarlıyoruz
  updatedAt DateTime @updatedAt // UpdatedAt otomatik olarak güncelleniyor

  @@index([countryId])
  @@index([storeId])

}



model OfferTag {
 id                    String   @id @default(cuid()) @map("_id")
  name String
  url  String  @unique

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


model FreeShipping{
   id                    String   @id @default(cuid()) @map("_id")
   productId String @unique
   product Product @relation("ProductFreeShipping",fields: [productId],references: [id],onDelete:Cascade) 

   eligableCountries FreeShippingCountry[] @relation("FreeShippingCountries")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}



model FreeShippingCountry{
   id                    String   @id @default(cuid()) @map("_id")
   freeShippingId String 
   freeShipping FreeShipping @relation("FreeShippingCountries",fields: [freeShippingId],references: [id],onDelete:Cascade) 

   countryId String 
   country Country @relation("FreeShippingToCountry",fields: [countryId],references: [id],onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

   @@index([freeShippingId]) 
   @@index([countryId])
}


model Review {
  id          String   @id @default(cuid()) @map("_id")
  variant     String
  variantImage String?
  review      String
  rating      Float
  color       String
  size        String
  quantity    String
  likes       Int      @default(0)

  images      ReviewImage[] @relation("ReviewToReviewImage")
  userId      String
  user        User @relation("ReviewToUser", fields: [userId], references: [id])
  productId   String
  product     Product @relation("ReviewToProduct", fields: [productId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([productId])

  @@unique([productId, userId, variant]) // Ensures only one review per user, product and variant
}


model ReviewImage{
  id                    String   @id @default(cuid()) @map("_id")
  url String
  alt String @default("")
  reviewId String
  review Review @relation("ReviewToReviewImage",fields: [reviewId],references: [id],onDelete:Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([reviewId])
}




